#include <iostream>
#include <vector>
#include <cstring>
#include <queue>
#include <algorithm>
#define INF (1 << 21)
#define N 15
using namespace std;

struct edge {
    int from,to,cap, flow, cost;
    edge(int a,int b,int c,int d,int e) {
        from = a;
        to = b;
        cap = c;
        flow = d;
        cost = e;
    }
};

struct solve {
    int n,m;
    vector<edge> edges;
    vector<int>G[N];
    int a[N];
    int p[N];
    int d[N];
    int inq[N];

    solve(int n,int m) {
        this->n = n;
        this->m = m;
    }
    void addEdge(int from,int to,int cap,int cost) {
        edges.push_back(edge(from,to,cap,0,cost));
        edges.push_back(edge(to,from,0,0,-cost));
        m = edges.size();
        G[from].push_back(m-2);
        G[to].push_back(m-1);
    }
    bool ford(int s,int t,int& flow,long long& cost) {
        for (int i = 0 ; i < n; i++) {
            d[i] = INF;
        }
        memset(inq,0,sizeof(inq));
        d[s] = 0; inq[s] = 1; p[s] = 0; a[s] = INF;
        queue<int> q;
        q.push(s);
        while(!q.empty()) {
            int u = q.front(); q.pop();
            inq[u] = 0;
            for (int i = 0 ; i < G[u].size(); i++) {
                edge& e = edges[ G[u][i] ];
                if(e.cap > e.flow && d[e.to] > d[u] + e.cost) {
                    d[e.to] = d[u] + e.cost;
                    p[e.to] = G[u][i];
                    a[e.to] = min(a[u], e.cap-e.flow);
                    if(!inq[e.to]) {
                        q.push(e.to);
                        inq[e.to] = 1;
                    }
                }
            }
        }
        if(d[t] == INF) return false;
        flow += a[t];
        cost += (long long)d[t] * (long long)a[t];
        for (int u = t; u != s; u = edges[ p[u] ].from) {
            edges[ p[u] ].flow += a[t];
            edges[ p[u]^1 ].flow -= a[t];
        }
        return true;
    }
    int minCostMaxFlow(int s,int t,long long& cost) {
        int flow = 0;
        cost = 0;
        while(ford(s,t,flow,cost));
        return flow;
    }
};

int main() {
    solve s(4,5);
    for(int i = 0 ; i < 5; i++) {
        int x,y,c,a; cin >> x >> y >> c >> a;
        s.addEdge(x,y,c,a);
    }
    long long cost = 0;
    cout << s.minCostMaxFlow(0,3,cost) << endl;
    cout << cost << endl;
    return 0;
}
